{"version":3,"sources":["../../src/queryProcessor.js"],"names":["STATS_BUCKETS","QueryProcessor","q","multiTenantsQuery","variablesHelper","capabilities","url","typeResources","numericMapping","point","value","timestamp","availMapping","legendRegexp","target","options","then","postData","start","range","from","valueOf","end","to","order","tenants","tenant","resolve","id","metricIds","caps","QUERY_POST_ENDPOINTS","raw","ids","rawQuery","timeAggFn","singleStatLiveQuery","limit","metrics","singleStatQuery","statsQuery","rawQueryLegacy","TAGS_QUERY_LANGUAGE","tagsQL","undefined","length","tags","resolveForQL","when","type","rate","tenantsPrefixer","res","processRawResponse","allSeries","all","map","encodeURIComponent","metric","replace","params","processRawResponseLegacy","refId","legend","timeSerie","prefix","datapoints","data","name","str","group","match","RegExp","exec","e","sortedData","sort","p1","p2","chain","zip","slice","filter","pair","point1","point2","value_diff","time_diff","seriesAggFn","statsQueryUnmerged","buckets","stacked","percentiles","getPercentilesToQuery","stats","join","processStatsResponse","multiTenantsData","flatten","prefixer","forEach","tenantData","result","percentile","getPercentileValue","stat","push","bucket","empty","findQuantileInBucket","types","metricsPerType","processUnmergedStatsResponse","series","allMetrics","metricId","hasOwnProperty","perc","percentileName","idx","indexOf","substring","quantile","percObj","find","p","toString","fnBucket","avg","min","max","processSingleStatResponse","Date","now","processSingleStatLiveResponse","reduceFunc","presentValues","reduce","a","b","latestPoints","timeSeries","dp","allTenantTimeSeries","oneTenantTimeSeries"],"mappings":"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","file":"queryProcessor.js","sourcesContent":["import _ from 'lodash';\nimport {modelToString as tagsModelToString} from './tagsKVPairsController';\n\nconst STATS_BUCKETS = 60;\n\nexport class QueryProcessor {\n\n  constructor(q, multiTenantsQuery, variablesHelper, capabilities, url, typeResources) {\n    this.q = q;\n    this.multiTenantsQuery = multiTenantsQuery;\n    this.variablesHelper = variablesHelper;\n    this.capabilities = capabilities;\n    this.url = url;\n    this.typeResources = typeResources;\n    this.numericMapping = point => [point.value, point.timestamp];\n    this.availMapping = point => [point.value == 'up' ? 1 : 0, point.timestamp];\n    this.legendRegexp = /{{(.+?)(?=}})}}/g;\n  }\n\n  run(target, options) {\n    return this.capabilities.then(caps => {\n      let postData = {\n        start: options.range.from.valueOf(),\n        end: options.range.to.valueOf(),\n        order: 'ASC'\n      };\n      let tenants = [null];\n      if (target.tenant) {\n        tenants = this.variablesHelper.resolve(target.tenant, options);\n      }\n      if (target.id) {\n        const metricIds = this.variablesHelper.resolve(target.id, options);\n        if (caps.QUERY_POST_ENDPOINTS) {\n          if (target.raw) {\n            postData.ids = metricIds;\n            return this.rawQuery(target, postData, tenants);\n          } else if (target.timeAggFn == 'live') {\n            // Need to change postData\n            return this.singleStatLiveQuery(target, {ids: metricIds, limit: 1}, tenants);\n          } else if (target.timeAggFn) {\n            // Query single stat\n            postData.metrics = metricIds;\n            return this.singleStatQuery(target, postData, tenants);\n          } else {\n            // Query stats for chart\n            postData.metrics = metricIds;\n            return this.statsQuery(target, postData, tenants);\n          }\n        } else {\n          return this.rawQueryLegacy(target, options.range, metricIds, tenants);\n        }\n      } else {\n        if (caps.TAGS_QUERY_LANGUAGE) {\n          if (target.tagsQL !== undefined && target.tagsQL.length > 0) {\n            postData.tags = this.variablesHelper.resolveForQL(target.tagsQL, options);\n          } else {\n            return this.q.when([]);\n          }\n        } else {\n          if (target.tags !== undefined && target.tags.length > 0) {\n            postData.tags = tagsModelToString(target.tags, this.variablesHelper, options);\n          } else {\n            return this.q.when([]);\n          }\n        }\n        if (target.raw) {\n          return this.rawQuery(target, postData, tenants);\n        } else if (target.timeAggFn == 'live') {\n          // Need to change postData\n          return this.singleStatLiveQuery(target, {tags: postData.tags, limit: 1}, tenants);\n        } else if (target.timeAggFn) {\n          // Query single stat\n          return this.singleStatQuery(target, postData, tenants);\n        } else {\n          // Query stats for chart\n          return this.statsQuery(target, postData, tenants);\n        }\n      }\n    });\n  }\n\n  rawQuery(target, postData, tenants) {\n    const url = `${this.url}/${this.typeResources[target.type]}/${target.rate ? 'rate' : 'raw'}/query`;\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(res => this.tenantsPrefixer(res))\n      .then(allSeries => this.processRawResponse(target, allSeries));\n  }\n\n  rawQueryLegacy(target, range, metricIds, tenants) {\n    return this.q.all(metricIds.map(metric => {\n      const url = `${this.url}/${this.typeResources[target.type]}/${encodeURIComponent(metric).replace('+', '%20')}/data`;\n      const params = {\n        start: range.from.valueOf(),\n        end: range.to.valueOf()\n      };\n      return this.multiTenantsQuery(tenants, url, params, null, 'GET')\n        .then(res => this.tenantsPrefixer(res))\n        .then(allSeries => this.processRawResponseLegacy(target, metric, allSeries));\n    }));\n  }\n\n  processRawResponse(target, allSeries) {\n    return allSeries.map(timeSerie => {\n      return {\n        refId: target.refId,\n        target: this.legend(target, timeSerie.prefix + timeSerie.id),\n        datapoints: timeSerie.data.map(target.type == 'availability' ? this.availMapping : this.numericMapping)\n      };\n    });\n  }\n\n  legend(target, name) {\n    if (target.legend) {\n      let legend = target.legend.replace(this.legendRegexp, function(str, group) {\n        try {\n          let match = new RegExp(group).exec(name);\n          if (match && match.length > 1) {\n            return match[1];\n          }\n        } catch(e) {\n        }\n        return str;\n      });\n      return legend;\n    }\n    return name;\n  }\n\n  processRawResponseLegacy(target, metric, data) {\n    let datapoints;\n    if (target.type == 'availability') {\n      datapoints = data.map(this.availMapping);\n    } else if (!target.rate) {\n      datapoints = data.map(this.numericMapping);\n    } else {\n      let sortedData = data.sort((p1, p2)=> p1.timestamp - p2.timestamp);\n      datapoints = _.chain(sortedData)\n        .zip(sortedData.slice(1))\n        .filter(pair => {\n          return pair[1] // Exclude the last pair\n            && (target.type != 'counter' || pair[0].value <= pair[1].value); // Exclude counter resets\n        })\n        .map(pair => {\n          let point1 = pair[0], point2 = pair[1];\n          let timestamp = point2.timestamp;\n          let value_diff = point2.value - point1.value;\n          let time_diff = point2.timestamp - point1.timestamp;\n          let rate = 60000 * value_diff / time_diff;\n          return [rate, timestamp];\n        })\n        .value();\n    }\n    return {\n      refId: target.refId,\n      target: metric,\n      datapoints: datapoints\n    };\n  }\n\n  statsQuery(target, postData, tenants) {\n    if (target.seriesAggFn === 'none') {\n      return this.statsQueryUnmerged(target, postData, tenants);\n    }\n    const url = `${this.url}/${this.typeResources[target.type]}/stats/query`;\n    delete postData.order;\n    postData.buckets = STATS_BUCKETS;\n    postData.stacked = target.seriesAggFn === 'sum';\n    const percentiles = this.getPercentilesToQuery(target.stats);\n    if (percentiles.length > 0) {\n      postData.percentiles = percentiles.join(',');\n    }\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(multiTenantsData => this.processStatsResponse(target, multiTenantsData));\n  }\n\n  processStatsResponse(target, multiTenantsData) {\n    // Response example: [ { tenant: 't1', result: [...] }, { tenant: 't2', result: [...] } ]\n    // Detailed `data[i].result`: [{start:1234, end:5678, avg:100.0, min:90.0, max:110.0, (...), percentiles:[{quantile: 90, value: 105.0}]}]\n    const flatten = [];\n    const prefixer = multiTenantsData.length > 1 ? (tenant) => `[${target.refId}: ${tenant}] ` : (tenant) => `[${target.refId}] `;\n    multiTenantsData.forEach(tenantData => {\n      if (tenantData.result) {\n        target.stats.forEach(stat => {\n          const percentile = this.getPercentileValue(stat);\n          if (percentile) {\n            flatten.push({\n              refId: target.refId,\n              target: this.legend(target, prefixer(tenantData.tenant) + stat),\n              datapoints: tenantData.result.filter(bucket => !bucket.empty)\n                .map(bucket => [this.findQuantileInBucket(percentile, bucket), bucket.start])\n            });\n          } else {\n            flatten.push({\n              refId: target.refId,\n              target: this.legend(target, prefixer(tenantData.tenant) + stat),\n              datapoints: tenantData.result.filter(bucket => !bucket.empty).map(bucket => [bucket[stat], bucket.start])\n            });\n          }\n        });\n      }\n    });\n    return flatten;\n  }\n\n  statsQueryUnmerged(target, postData, tenants) {\n    const url = `${this.url}/metrics/stats/query`;\n    delete postData.order;\n    postData.buckets = STATS_BUCKETS;\n    postData.types = [target.type];\n    if (postData.metrics) {\n      const metricsPerType = {};\n      metricsPerType[target.type] = postData.metrics;\n      postData.metrics = metricsPerType;\n    }\n    const percentiles = this.getPercentilesToQuery(target.stats);\n    if (percentiles.length > 0) {\n      postData.percentiles = percentiles.join(',');\n    }\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(multiTenantsData => this.processUnmergedStatsResponse(target, multiTenantsData));\n  }\n\n  processUnmergedStatsResponse(target, multiTenantsData) {\n    // Response example: [ { tenant: 't1', result: {...} }, { tenant: 't2', result: {...} } ]\n    // Detailed `data[i].result`:\n    // {\"gauge\": {\"my_metric\": [\n    //    {start:1234, end:5678, avg:100.0, min:90.0, max:110.0, (...), percentiles:[{quantile: 90, value: 105.0}]}\n    // ]}}\n    const series = [];\n    const prefixer = multiTenantsData.length > 1 ? (tenant) => `[${tenant}] ` : (tenant) => '';\n    multiTenantsData.forEach(tenantData => {\n      if (tenantData.result) {\n        const allMetrics = tenantData.result[target.type];\n        const prefix = prefixer(tenantData.tenant);\n        for (let metricId in allMetrics) {\n          if (allMetrics.hasOwnProperty(metricId)) {\n            const buckets = allMetrics[metricId];\n            target.stats.forEach(stat => {\n              const percentile = this.getPercentileValue(stat);\n              if (percentile) {\n                series.push({\n                  refId: target.refId,\n                  target: this.legend(target, `${prefix}${metricId} [${stat}]`),\n                  datapoints: buckets.filter(bucket => !bucket.empty)\n                    .map(bucket => [this.findQuantileInBucket(percentile, bucket), bucket.start])\n                });\n              } else {\n                series.push({\n                  refId: target.refId,\n                  target: this.legend(target, `${prefix}${metricId} [${stat}]`),\n                  datapoints: buckets.filter(bucket => !bucket.empty).map(bucket => [bucket[stat], bucket.start])\n                });\n              }\n            });\n          }\n        }\n      }\n    });\n    return series;\n  }\n\n  getPercentilesToQuery(stats) {\n    return stats.map(this.getPercentileValue).filter(perc => perc != null);\n  }\n\n  getPercentileValue(percentileName) {\n    const idx = percentileName.indexOf(' %ile');\n    return (idx >= 0) ? percentileName.substring(0, idx) : null;\n  }\n\n  findQuantileInBucket(quantile, bucket) {\n    if (bucket.percentiles) {\n      const percObj = bucket.percentiles.find(p => p.quantile.toString().indexOf(quantile) >= 0);\n      if (percObj) {\n        return percObj.value;\n      }\n    }\n    return null;\n  }\n\n  singleStatQuery(target, postData, tenants) {\n    // Query for singlestat => we just ask for a single bucket\n    // But because of that we need to override Grafana behaviour, and manage ourselves the min/max/avg/etc. selection\n    let fnBucket;\n    if (target.timeAggFn == 'avg') {\n      fnBucket = bucket => bucket.avg;\n    } else if (target.timeAggFn == 'min') {\n      fnBucket = bucket => bucket.min;\n    } else if (target.timeAggFn == 'max') {\n      fnBucket = bucket => bucket.max;\n    } // no else case. \"live\" case was handled before\n    const url = `${this.url}/${this.typeResources[target.type]}/stats/query`;\n    delete postData.order;\n    postData.buckets = 1;\n    postData.stacked = target.seriesAggFn === 'sum';\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(multiTenantsData => this.processSingleStatResponse(target, fnBucket, multiTenantsData));\n  }\n\n  processSingleStatResponse(target, fnBucket, multiTenantsData) {\n    return _.flatten(multiTenantsData.map(tenantData => {\n      if (tenantData.result) {\n        return tenantData.result.map(bucket => {\n          return {\n            refId: target.refId,\n            target: 'Aggregate',\n            datapoints: [[fnBucket(bucket), bucket.start]]\n          };\n        });\n      }\n    }));\n  }\n\n  singleStatLiveQuery(target, postData, tenants) {\n    const url = `${this.url}/${this.typeResources[target.type]}/${target.rate ? 'rate' : 'raw'}/query`;\n    // Set start to now - 5m\n    postData.start = Date.now() - 300000;\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(multiTenantsData => this.processSingleStatLiveResponse(target, multiTenantsData));\n  }\n\n  processSingleStatLiveResponse(target, multiTenantsData) {\n    let reduceFunc;\n    if (target.seriesAggFn === 'sum') {\n      reduceFunc = (presentValues => presentValues.reduce((a,b) => a+b));\n    } else {\n      reduceFunc = (presentValues => presentValues.reduce((a,b) => a+b) / presentValues.length);\n    }\n    return _.flatten(multiTenantsData.map(tenantData => {\n      if (tenantData.result) {\n        let datapoints;\n        const latestPoints = tenantData.result.filter(timeSeries => timeSeries.data.length > 0)\n            .map(timeSeries => timeSeries.data[0]);\n        if (latestPoints.length === 0) {\n          datapoints = [];\n        } else {\n          datapoints = [[reduceFunc(latestPoints.map(dp => dp.value)), latestPoints[0].timestamp]];\n        }\n        return [{\n          refId: target.refId,\n          target: 'Aggregate',\n          datapoints: datapoints\n        }];\n      }\n    }));\n  }\n\n  tenantsPrefixer(allTenantTimeSeries) {\n    // Exemple of input:\n    // [ { tenant: 't1', result: [ {id: metricA, data: []} ] }, { tenant: 't2', result: [ {id: metricB, data: []} ] } ]\n    const flatten = [];\n    const prefixer = allTenantTimeSeries.length > 1 ? (tenant) => `[${tenant}] ` : (tenant) => '';\n    allTenantTimeSeries.forEach(oneTenantTimeSeries => {\n      if (oneTenantTimeSeries.result) {\n        oneTenantTimeSeries.result.forEach(timeSeries => {\n          timeSeries.prefix = prefixer(oneTenantTimeSeries.tenant);\n          flatten.push(timeSeries);\n        })\n      }\n    })\n    return flatten;\n  }\n}\n"]}