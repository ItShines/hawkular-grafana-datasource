{"version":3,"sources":["../../src/queryProcessor.js"],"names":["STATS_BUCKETS","QueryProcessor","q","backendSrv","variablesHelper","capabilities","url","getHeaders","typeResources","numericMapping","point","value","timestamp","availMapping","target","options","then","postData","start","range","from","valueOf","end","to","order","id","metricIds","resolve","caps","QUERY_POST_ENDPOINTS","raw","ids","rawQuery","timeAggFn","singleStatLiveQuery","limit","metrics","singleStatQuery","statsQuery","rawQueryLegacy","TAGS_QUERY_LANGUAGE","tagsQL","undefined","length","tags","resolveForQL","when","type","rate","datasourceRequest","data","method","headers","tenant","processRawResponse","response","status","all","map","encodeURIComponent","metric","replace","params","processRawResponseLegacy","refId","timeSerie","datapoints","sortedData","sort","p1","p2","_","chain","zip","slice","filter","pair","point1","point2","value_diff","time_diff","seriesAggFn","statsQueryUnmerged","buckets","stacked","percentiles","getPercentilesToQuery","stats","join","processStatsResponse","percentile","getPercentileValue","stat","bucket","empty","findQuantileInBucket","types","metricsPerType","processUnmergedStatsResponse","series","allMetrics","metricId","hasOwnProperty","forEach","push","perc","percentileName","idx","indexOf","substring","quantile","percObj","find","p","toString","fnBucket","avg","min","max","processSingleStatResponse","Date","now","processSingleStatLiveResponse","reduceFunc","presentValues","reduce","a","b","latestPoints","timeSeries","dp"],"mappings":"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","file":"queryProcessor.js","sourcesContent":["import {modelToString as tagsModelToString} from './tagsKVPairsController';\n\nconst STATS_BUCKETS = 60;\n\nexport class QueryProcessor {\n\n  constructor(q, backendSrv, variablesHelper, capabilities, url, getHeaders, typeResources) {\n    this.q = q;\n    this.backendSrv = backendSrv;\n    this.variablesHelper = variablesHelper;\n    this.capabilities = capabilities;\n    this.url = url;\n    this.getHeaders = getHeaders;\n    this.typeResources = typeResources;\n    this.numericMapping = point => [point.value, point.timestamp];\n    this.availMapping = point => [point.value == 'up' ? 1 : 0, point.timestamp];\n  }\n\n  run(target, options) {\n    return this.capabilities.then(caps => {\n      let postData = {\n        start: options.range.from.valueOf(),\n        end: options.range.to.valueOf(),\n        order: 'ASC'\n      };\n      if (target.id) {\n        const metricIds = this.variablesHelper.resolve(target.id, options);\n        if (caps.QUERY_POST_ENDPOINTS) {\n          if (target.raw) {\n            postData.ids = metricIds;\n            return this.rawQuery(target, postData);\n          } else if (target.timeAggFn == 'live') {\n            // Need to change postData\n            return this.singleStatLiveQuery(target, {ids: metricIds, limit: 1});\n          } else if (target.timeAggFn) {\n            // Query single stat\n            postData.metrics = metricIds;\n            return this.singleStatQuery(target, postData);\n          } else {\n            // Query stats for chart\n            postData.metrics = metricIds;\n            return this.statsQuery(target, postData);\n          }\n        } else {\n          return this.rawQueryLegacy(target, options.range, metricIds);\n        }\n      } else {\n        if (caps.TAGS_QUERY_LANGUAGE) {\n          if (target.tagsQL !== undefined && target.tagsQL.length > 0) {\n            postData.tags = this.variablesHelper.resolveForQL(target.tagsQL, options);\n          } else {\n            return this.q.when([]);\n          }\n        } else {\n          if (target.tags !== undefined && target.tags.length > 0) {\n            postData.tags = tagsModelToString(target.tags, this.variablesHelper, options);\n          } else {\n            return this.q.when([]);\n          }\n        }\n        if (target.raw) {\n          return this.rawQuery(target, postData);\n        } else if (target.timeAggFn == 'live') {\n          // Need to change postData\n          return this.singleStatLiveQuery(target, {tags: postData.tags, limit: 1});\n        } else if (target.timeAggFn) {\n          // Query single stat\n          return this.singleStatQuery(target, postData);\n        } else {\n          // Query stats for chart\n          return this.statsQuery(target, postData);\n        }\n      }\n    });\n  }\n\n  rawQuery(target, postData) {\n    const url = `${this.url}/${this.typeResources[target.type]}/${target.rate ? 'rate' : 'raw'}/query`;\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: postData,\n      method: 'POST',\n      headers: this.getHeaders(target.tenant)\n    }).then(response => this.processRawResponse(target, response.status == 200 ? response.data : []));\n  }\n\n  rawQueryLegacy(target, range, metricIds) {\n    return this.q.all(metricIds.map(metric => {\n      const url = `${this.url}/${this.typeResources[target.type]}/${encodeURIComponent(metric).replace('+', '%20')}/data`;\n      return this.backendSrv.datasourceRequest({\n        url: url,\n        params: {\n          start: range.from.valueOf(),\n          end: range.to.valueOf()\n        },\n        method: 'GET',\n        headers: this.getHeaders(target.tenant)\n      }).then(response => this.processRawResponseLegacy(target, metric, response.status == 200 ? response.data : []));\n    }));\n  }\n\n  processRawResponse(target, data) {\n    return data.map(timeSerie => {\n      return {\n        refId: target.refId,\n        target: timeSerie.id,\n        datapoints: timeSerie.data.map(target.type == 'availability' ? this.availMapping : this.numericMapping)\n      };\n    });\n  }\n\n  processRawResponseLegacy(target, metric, data) {\n    let datapoints;\n    if (target.type == 'availability') {\n      datapoints = data.map(this.availMapping);\n    } else if (!target.rate) {\n      datapoints = data.map(this.numericMapping);\n    } else {\n      let sortedData = data.sort((p1, p2)=> p1.timestamp - p2.timestamp);\n      datapoints = _.chain(sortedData)\n        .zip(sortedData.slice(1))\n        .filter(pair => {\n          return pair[1] // Exclude the last pair\n            && (target.type != 'counter' || pair[0].value <= pair[1].value); // Exclude counter resets\n        })\n        .map(pair => {\n          let point1 = pair[0], point2 = pair[1];\n          let timestamp = point2.timestamp;\n          let value_diff = point2.value - point1.value;\n          let time_diff = point2.timestamp - point1.timestamp;\n          let rate = 60000 * value_diff / time_diff;\n          return [rate, timestamp];\n        })\n        .value();\n    }\n    return {\n      refId: target.refId,\n      target: metric,\n      datapoints: datapoints\n    };\n  }\n\n  statsQuery(target, postData) {\n    if (target.seriesAggFn === 'none') {\n      return this.statsQueryUnmerged(target, postData);\n    }\n    const url = `${this.url}/${this.typeResources[target.type]}/stats/query`;\n    delete postData.order;\n    postData.buckets = STATS_BUCKETS;\n    postData.stacked = target.seriesAggFn === 'sum';\n    const percentiles = this.getPercentilesToQuery(target.stats);\n    if (percentiles.length > 0) {\n      postData.percentiles = percentiles.join(',');\n    }\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: postData,\n      method: 'POST',\n      headers: this.getHeaders(target.tenant)\n    }).then(response => this.processStatsResponse(target, response.status == 200 ? response.data : []));\n  }\n\n  processStatsResponse(target, data) {\n    // Response example: [{start:1234, end:5678, avg:100.0, min:90.0, max:110.0, (...), percentiles:[{quantile: 90, value: 105.0}]}]\n    return target.stats.map(stat => {\n      const percentile = this.getPercentileValue(stat);\n      if (percentile) {\n        return {\n          refId: target.refId,\n          target: stat,\n          datapoints: data.filter(bucket => !bucket.empty)\n            .map(bucket => [this.findQuantileInBucket(percentile, bucket), bucket.start])\n        };\n      } else {\n        return {\n          refId: target.refId,\n          target: stat,\n          datapoints: data.filter(bucket => !bucket.empty).map(bucket => [bucket[stat], bucket.start])\n        };\n      }\n    });\n  }\n\n  statsQueryUnmerged(target, postData) {\n    const url = `${this.url}/metrics/stats/query`;\n    delete postData.order;\n    postData.buckets = STATS_BUCKETS;\n    postData.types = [target.type];\n    if (postData.metrics) {\n      const metricsPerType = {};\n      metricsPerType[target.type] = postData.metrics;\n      postData.metrics = metricsPerType;\n    }\n    const percentiles = this.getPercentilesToQuery(target.stats);\n    if (percentiles.length > 0) {\n      postData.percentiles = percentiles.join(',');\n    }\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: postData,\n      method: 'POST',\n      headers: this.getHeaders(target.tenant)\n    }).then(response => this.processUnmergedStatsResponse(target, response.status == 200 ? response.data : []));\n  }\n\n  processUnmergedStatsResponse(target, data) {\n    // Response example:\n    // {\"gauge\": {\"my_metric\": [\n    //    {start:1234, end:5678, avg:100.0, min:90.0, max:110.0, (...), percentiles:[{quantile: 90, value: 105.0}]}\n    // ]}}\n    const series = [];\n    const allMetrics = data[target.type];\n    for (let metricId in allMetrics) {\n      if (allMetrics.hasOwnProperty(metricId)) {\n        const buckets = allMetrics[metricId];\n        target.stats.forEach(stat => {\n          const percentile = this.getPercentileValue(stat);\n          if (percentile) {\n            series.push({\n              refId: target.refId,\n              target: `${metricId} [${stat}]`,\n              datapoints: buckets.filter(bucket => !bucket.empty)\n                .map(bucket => [this.findQuantileInBucket(percentile, bucket), bucket.start])\n            });\n          } else {\n            series.push({\n              refId: target.refId,\n              target: `${metricId} [${stat}]`,\n              datapoints: buckets.filter(bucket => !bucket.empty).map(bucket => [bucket[stat], bucket.start])\n            });\n          }\n        });\n      }\n    }\n    return series;\n  }\n\n  getPercentilesToQuery(stats) {\n    return stats.map(this.getPercentileValue).filter(perc => perc != null);\n  }\n\n  getPercentileValue(percentileName) {\n    const idx = percentileName.indexOf(' %ile');\n    return (idx >= 0) ? percentileName.substring(0, idx) : null;\n  }\n\n  findQuantileInBucket(quantile, bucket) {\n    if (bucket.percentiles) {\n      const percObj = bucket.percentiles.find(p => p.quantile.toString().indexOf(quantile) >= 0);\n      if (percObj) {\n        return percObj.value;\n      }\n    }\n    return null;\n  }\n\n  singleStatQuery(target, postData) {\n    // Query for singlestat => we just ask for a single bucket\n    // But because of that we need to override Grafana behaviour, and manage ourselves the min/max/avg/etc. selection\n    let fnBucket;\n    if (target.timeAggFn == 'avg') {\n      fnBucket = bucket => bucket.avg;\n    } else if (target.timeAggFn == 'min') {\n      fnBucket = bucket => bucket.min;\n    } else if (target.timeAggFn == 'max') {\n      fnBucket = bucket => bucket.max;\n    } // no else case. \"live\" case was handled before\n    const url = `${this.url}/${this.typeResources[target.type]}/stats/query`;\n    delete postData.order;\n    postData.buckets = 1;\n    postData.stacked = target.seriesAggFn === 'sum';\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: postData,\n      method: 'POST',\n      headers: this.getHeaders(target.tenant)\n    }).then(response => this.processSingleStatResponse(target, fnBucket, response.status == 200 ? response.data : []));\n  }\n\n  processSingleStatResponse(target, fnBucket, data) {\n    return data.map(bucket => {\n      return {\n        refId: target.refId,\n        target: 'Aggregate',\n        datapoints: [[fnBucket(bucket), bucket.start]]\n      };\n    });\n  }\n\n  singleStatLiveQuery(target, postData) {\n    const url = `${this.url}/${this.typeResources[target.type]}/${target.rate ? 'rate' : 'raw'}/query`;\n    // Set start to now - 5m\n    postData.start = Date.now() - 300000;\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: postData,\n      method: 'POST',\n      headers: this.getHeaders(target.tenant)\n    }).then(response => this.processSingleStatLiveResponse(target, response.status == 200 ? response.data : []));\n  }\n\n  processSingleStatLiveResponse(target, data) {\n    let reduceFunc;\n    if (target.seriesAggFn === 'sum') {\n      reduceFunc = (presentValues => presentValues.reduce((a,b) => a+b));\n    } else {\n      reduceFunc = (presentValues => presentValues.reduce((a,b) => a+b) / presentValues.length);\n    }\n    let datapoints;\n    const latestPoints = data.filter(timeSeries => timeSeries.data.length > 0)\n        .map(timeSeries => timeSeries.data[0]);\n    if (latestPoints.length === 0) {\n      datapoints = [];\n    } else {\n      datapoints = [[reduceFunc(latestPoints.map(dp => dp.value)), latestPoints[0].timestamp]];\n    }\n    return [{\n      refId: target.refId,\n      target: 'Aggregate',\n      datapoints: datapoints\n    }];\n  }\n}\n"]}