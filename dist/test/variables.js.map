{"version":3,"sources":["../../src/variables.js"],"names":["Variables","templateSrv","target","options","variables","scopedVars","variableNames","match","resolved","forEach","values","getVarValues","name","newResolved","push","replace","val","map","v","join","charAt","substring","length","split","variableExists"],"mappings":";;;;;;;;;;IAAaA,S,WAAAA,S;AAEX,qBAAYC,WAAZ,EAAyB;AAAA;;AACvB,SAAKA,WAAL,GAAmBA,WAAnB;AACD;;;;4BAEOC,M,EAAQC,O,EAAS;AAAA;;AACvB,UAAMC,YAAYD,QAAQE,UAAR,IAAsB,KAAKJ,WAAL,CAAiBG,SAAzD;AACA;AACA,UAAME,gBAAgBJ,OAAOK,KAAP,CAAa,QAAb,CAAtB;AACA,UAAIC,WAAW,CAACN,MAAD,CAAf;AACA,UAAII,aAAJ,EAAmB;AACjBA,sBAAcG,OAAd,CAAsB,gBAAQ;AAC5B,cAAMC,SAAS,MAAKC,YAAL,CAAkBC,IAAlB,EAAwBR,SAAxB,CAAf;AACA,cAAMS,cAAc,EAApB;AACAH,iBAAOD,OAAP,CAAe,eAAO;AACpBD,qBAASC,OAAT,CAAiB,kBAAU;AACzBI,0BAAYC,IAAZ,CAAiBZ,OAAOa,OAAP,CAAeH,IAAf,EAAqBI,GAArB,CAAjB;AACD,aAFD;AAGD,WAJD;AAKAR,qBAAWK,WAAX;AACD,SATD;AAUD;AACD,aAAOL,QAAP;AACD;;;oCAEeN,M,EAAQC,O,EAAS;AAAA;;AAC/B,UAAMC,YAAYD,QAAQE,UAAR,IAAsB,KAAKJ,WAAL,CAAiBG,SAAzD;AACA,aAAOF,OAAOa,OAAP,CAAe,QAAf,EAAyB,gBAAQ;AACtC,YAAML,SAAS,OAAKC,YAAL,CAAkBC,IAAlB,EAAwBR,SAAxB,CAAf;AACA,eAAOM,OAAOO,GAAP,CAAW;AAAA,iBAAK,MAAMC,CAAN,GAAU,GAAf;AAAA,SAAX,EAA+BC,IAA/B,CAAoC,GAApC,CAAP;AACD,OAHM,CAAP;AAID;;;iCAEYP,I,EAAMR,S,EAAW;AAC5B,UAAMM,SAAS,KAAKT,WAAL,CAAiBc,OAAjB,CAAyBH,IAAzB,EAA+BR,SAA/B,CAAf;AACA;AACA,UAAIM,OAAOU,MAAP,CAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC1B,eAAOV,OAAOW,SAAP,CAAiB,CAAjB,EAAoBX,OAAOY,MAAP,GAAc,CAAlC,EAAqCC,KAArC,CAA2C,GAA3C,CAAP;AACH;AACD,aAAO,CAACb,MAAD,CAAP;AACD;;;2BAEME,I,EAAM;AACX,aAAO,KAAKX,WAAL,CAAiBuB,cAAjB,CAAgCZ,IAAhC,CAAP;AACD","file":"variables.js","sourcesContent":["export class Variables {\n\n  constructor(templateSrv) {\n    this.templateSrv = templateSrv;\n  }\n\n  resolve(target, options) {\n    const variables = options.scopedVars || this.templateSrv.variables;\n    // For each variable in target, and each values of a given variable, build a resolved target string\n    const variableNames = target.match(/\\$\\w+/g);\n    let resolved = [target];\n    if (variableNames) {\n      variableNames.forEach(name => {\n        const values = this.getVarValues(name, variables);\n        const newResolved = [];\n        values.forEach(val => {\n          resolved.forEach(target => {\n            newResolved.push(target.replace(name, val));\n          });\n        });\n        resolved = newResolved;\n      });\n    }\n    return resolved;\n  }\n\n  resolveToString(target, options) {\n    const variables = options.scopedVars || this.templateSrv.variables;\n    return target.replace(/\\$\\w+/g, name => {\n      const values = this.getVarValues(name, variables);\n      return values.map(v => \"'\" + v + \"'\").join(',');\n    });\n  }\n\n  getVarValues(name, variables) {\n    const values = this.templateSrv.replace(name, variables);\n    // result might be in like \"{id1,id2,id3}\" (as string)\n    if (values.charAt(0) === '{') {\n        return values.substring(1, values.length-1).split(',');\n    }\n    return [values];\n  }\n\n  exists(name) {\n    return this.templateSrv.variableExists(name);\n  }\n}\n"]}