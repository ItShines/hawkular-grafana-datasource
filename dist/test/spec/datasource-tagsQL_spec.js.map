{"version":3,"sources":["../../../spec/datasource-tagsQL_spec.js"],"names":["describe","ctx","hProtocol","hHostname","hPort","hPath","instanceSettings","url","jsonData","tenant","parsePathElements","expect","request","method","to","equal","headers","have","property","parser","document","createElement","href","pathname","split","filter","e","length","beforeEach","$q","backendSrv","datasourceRequest","when","data","templateSrv","replace","target","vars","ds","it","query","targets","then","result","with","done","err","options","range","from","tagsQL","type","rate","pathElements","slice","deep","start","end","tags","order","status","seriesAggFn","timeAggFn","buckets","stacked","limit"],"mappings":"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","file":"datasource-tagsQL_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('HawkularDatasource with tagsQL', () => {\n  const ctx = {};\n  const hProtocol = 'https';\n  const hHostname = 'test.com';\n  const hPort = '876';\n  const hPath = 'hawkular/metrics';\n  const instanceSettings = {\n    url: hProtocol + '://' + hHostname + ':' + hPort + '/' + hPath,\n    jsonData: {\n      tenant: 'test-tenant'\n    }\n  };\n\n  const parsePathElements = request => {\n    expect(request.method).to.equal('POST');\n    expect(request.headers).to.have.property('Hawkular-Tenant', instanceSettings.jsonData.tenant);\n\n    const parser = document.createElement('a');\n    parser.href = request.url;\n\n    expect(parser).to.have.property('protocol', hProtocol + ':');\n    expect(parser).to.have.property('hostname', hHostname);\n    expect(parser).to.have.property('port', hPort);\n    expect(parser).to.have.property('pathname');\n\n    return parser.pathname.split('/').filter(e => e.length != 0);\n  }\n\n  beforeEach(() => {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.backendSrv.datasourceRequest = request => {\n      return ctx.$q.when({data: {'Implementation-Version': '0.24.0'}})\n    };\n    ctx.templateSrv = {\n        replace: (target, vars) => target\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  it('should return an empty array when no targets are set', done => {\n    ctx.ds.query({targets: []}).then(result => {\n      expect(result).to.have.property('data').with.length(0);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query by tags QL', done => {\n    const options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        tagsQL: 'type=memory AND host=myhost',\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'raw', 'query']);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type=memory AND host=myhost',\n        order: 'ASC'\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: []\n      });\n    };\n\n    ctx.ds.query(options).then(v => done(), err => done(err));\n  });\n\n  it('should return aggregated stats by tags QL', done => {\n\n    const options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        timeAggFn: 'max',\n        tagsQL: 'type=memory',\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'stats', 'query']);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type=memory',\n        buckets: 1,\n        stacked: true\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: []\n      });\n    };\n\n    ctx.ds.query(options).then(v => done(), err => done(err));\n  });\n\n  it('should return live stats with tagsQL', done => {\n\n    const options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        timeAggFn: 'live',\n        tagsQL: 'type=memory',\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'raw', 'query']);\n      expect(request.data.limit).to.equal(1);\n      expect(request.data.tags).to.equal('type=memory');\n\n      return ctx.$q.when({\n        status: 200,\n        data: []\n      });\n    };\n\n    ctx.ds.query(options).then(v => done(), err => done(err));\n  });\n});\n"]}