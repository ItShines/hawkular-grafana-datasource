{"version":3,"sources":["../../../spec/variables_spec.js"],"names":["describe","ctx","templateSrv","variables","beforeEach","replace","target","vars","it","expect","to","equal","resolved","resolve","deep","done","resolveToString"],"mappings":";;AAAA;;AACA;;;;;;AAEAA,SAAS,WAAT,EAAsB,YAAM;AAC1B,MAAMC,MAAM;AACVC,iBAAa,EADH;AAEVC,eAAW;AAFD,GAAZ;;AAKAC,aAAW,YAAM;AACfH,QAAIC,WAAJ,GAAkB;AACdG,eAAS,iBAACC,MAAD,EAASC,IAAT;AAAA,eAAkBD,MAAlB;AAAA;AADK,KAAlB;AAGAL,QAAIE,SAAJ,GAAgB,yBAAcF,IAAIC,WAAlB,CAAhB;AACD,GALD;;AAOAM,KAAG,gCAAH,EAAqC,gBAAQ;AAC3CP,QAAIC,WAAJ,CAAgBG,OAAhB,GAA0B,UAACC,MAAD,EAASC,IAAT,EAAkB;AAC1CE,aAAOH,MAAP,EAAeI,EAAf,CAAkBC,KAAlB,CAAwB,MAAxB;AACA,aAAO,eAAP;AACD,KAHD;AAIA,QAAMC,WAAWX,IAAIE,SAAJ,CAAcU,OAAd,CAAsB,mBAAtB,EAA2C,EAA3C,CAAjB;AACAJ,WAAOG,QAAP,EAAiBF,EAAjB,CAAoBI,IAApB,CAAyBH,KAAzB,CAA+B,CAAC,oBAAD,EAAuB,oBAAvB,CAA/B;AACAI;AACD,GARD;;AAUAP,KAAG,mCAAH,EAAwC,gBAAQ;AAC9CP,QAAIC,WAAJ,CAAgBG,OAAhB,GAA0B,UAACC,MAAD,EAASC,IAAT,EAAkB;AAC1C,UAAID,WAAW,MAAf,EAAuB;AACrB,eAAO,eAAP;AACD;AACD,UAAIA,WAAW,YAAf,EAA6B;AAC3B,eAAO,gBAAP;AACD;AACD,aAAOA,MAAP;AACD,KARD;AASA,QAAMM,WAAWX,IAAIE,SAAJ,CAAcU,OAAd,CAAsB,8BAAtB,EAAsD,EAAtD,CAAjB;AACAJ,WAAOG,QAAP,EAAiBF,EAAjB,CAAoBI,IAApB,CAAyBH,KAAzB,CAA+B,CAC7B,yBAD6B,EAE7B,yBAF6B,EAG7B,yBAH6B,EAI7B,yBAJ6B,EAK7B,uBAL6B,EAM7B,uBAN6B,CAA/B;AAQAI;AACD,GApBD;;AAsBAP,KAAG,0BAAH,EAA+B,gBAAQ;AACrCP,QAAIC,WAAJ,CAAgBG,OAAhB,GAA0B,UAACC,MAAD,EAASC,IAAT,EAAkB;AAC1C,UAAID,WAAW,MAAf,EAAuB;AACrB,eAAO,eAAP;AACD;AACD,UAAIA,WAAW,YAAf,EAA6B;AAC3B,eAAO,gBAAP;AACD;AACF,KAPD;AAQA,QAAMM,WAAWX,IAAIE,SAAJ,CAAca,eAAd,CAA8B,2DAA9B,EAA2F,EAA3F,CAAjB;AACAP,WAAOG,QAAP,EAAiBF,EAAjB,CAAoBI,IAApB,CAAyBH,KAAzB,CAA+B,8EAA/B;AACAI;AACD,GAZD;AAaD,CA1DD","file":"variables_spec.js","sourcesContent":["import {Variables} from \"../variables\";\nimport Q from \"q\";\n\ndescribe('Variables', () => {\n  const ctx = {\n    templateSrv: {},\n    variables: {}\n  };\n\n  beforeEach(() => {\n    ctx.templateSrv = {\n        replace: (target, vars) => target\n    };\n    ctx.variables = new Variables(ctx.templateSrv);\n  });\n\n  it('should resolve single variable', done => {\n    ctx.templateSrv.replace = (target, vars) => {\n      expect(target).to.equal('$app');\n      return \"{app_1,app_2}\";\n    };\n    const resolved = ctx.variables.resolve(\"$app/memory/usage\", {});\n    expect(resolved).to.deep.equal(['app_1/memory/usage', 'app_2/memory/usage']);\n    done();\n  });\n\n  it('should resolve multiple variables', done => {\n    ctx.templateSrv.replace = (target, vars) => {\n      if (target === '$app') {\n        return \"{app_1,app_2}\";\n      }\n      if (target === '$container') {\n        return \"{1234,5678,90}\";\n      }\n      return target;\n    };\n    const resolved = ctx.variables.resolve(\"$app/$container/memory/usage\", {});\n    expect(resolved).to.deep.equal([\n      'app_1/1234/memory/usage',\n      'app_2/1234/memory/usage',\n      'app_1/5678/memory/usage',\n      'app_2/5678/memory/usage',\n      'app_1/90/memory/usage',\n      'app_2/90/memory/usage'\n    ]);\n    done();\n  });\n\n  it('should resolve to string', done => {\n    ctx.templateSrv.replace = (target, vars) => {\n      if (target === '$app') {\n        return \"{app_1,app_2}\";\n      }\n      if (target === '$container') {\n        return \"{1234,5678,90}\";\n      }\n    };\n    const resolved = ctx.variables.resolveToString(\"app IN [$app] AND container NOT IN ['a', $container, 'z']\", {});\n    expect(resolved).to.deep.equal(\"app IN ['app_1','app_2'] AND container NOT IN ['a', '1234','5678','90', 'z']\");\n    done();\n  });\n});\n"]}